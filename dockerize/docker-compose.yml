volumes:
  postgres_data:
  rabbitmq:
  celerybeat-schedule:
  static-data:
  media-data:
  backups-data:
services:

  db:
    container_name: qgis-plugins-db
    image: kartoza/postgis:16-3.4
    environment:
      - ALLOW_IP_RANGE=0.0.0.0/0
      - POSTGRES_USER=${DATABASE_USERNAME:-docker}
      - POSTGRES_PASS=${DATABASE_PASSWORD:-docker}
      - PASSWORD_AUTHENTICATION=${PASSWORD_AUTHENTICATION:-md5}
      - DATADIR=/opt/postgres/data
      - DEFAULT_ENCODING=UTF8
      - DEFAULT_COLLATION=en_GB.utf8
      - DEFAULT_CTYPE=en_GB.utf8
    volumes:
      - postgres_data:/opt/postgres/data
      - ${QGISPLUGINS_BACKUP_VOLUME}:/backups
    restart: unless-stopped
    networks:
      internal:

  uwsgi: &uwsgi-common
    build:
      context: ${PWD}/../
      dockerfile: dockerize/docker/Dockerfile
      target: prod
    hostname: uwsgi
    expose:
      - "8080"
    environment:
      - DATABASE_NAME=${DATABASE_NAME:-gis}
      - DATABASE_USERNAME=${DATABASE_USERNAME:-docker}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-docker}
      - DATABASE_HOST=${DATABASE_HOST:-db}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-settings_docker}
      - VIRTUAL_HOST=${VIRTUAL_HOST:-plugins.kartoza.com}
      - VIRTUAL_PORT=${VIRTUAL_PORT:-8080}
      - DEBUG=${DEBUG:-False}
      - ENABLE_LDAP=${ENABLE_LDAP:-False}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - BROKER_URL=amqp://rabbitmq:5672
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER:-automation}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_PLUGINS_SITE=${DEFAULT_PLUGINS_SITE:-https://plugins.qgis.org/}
      - DOWNLOAD_RATE_LIMIT=${DOWNLOAD_RATE_LIMIT:-10}
    volumes:
      - ../qgis-app:/home/web/django_project
      - ./docker/uwsgi.conf:/uwsgi.conf
      - ${QGISPLUGINS_STATIC_VOLUME}:/home/web/static:rw
      - ${QGISPLUGINS_MEDIA_VOLUME}:/home/web/media:rw
      - celerybeat-schedule:/home/web/celerybeat-schedule:rw
    
    depends_on:
      - db
      - rabbitmq
    restart: unless-stopped
    user: root
    networks:
      internal:

  # This is the entry point for a development server.
  # Run with --no-deps to run attached to the services
  # from prod environment if wanted
  devweb:
    <<: *uwsgi-common
    container_name: qgis-plugins-devweb
    build:
      context: ${PWD}/../
      dockerfile: dockerize/docker/Dockerfile
      target: dev
    volumes:
      - ../qgis-app:/home/web/django_project
      - ${QGISPLUGINS_STATIC_VOLUME}:/home/web/static:rw
      - ${QGISPLUGINS_MEDIA_VOLUME}:/home/web/media:rw
    ports:
      # for django test server
      - "62202:8080"
      # for ssh
      - "62203:22"
    networks:
      internal:

  rabbitmq:
    image: rabbitmq:3.7-alpine
    hostname: rabbitmq
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      internal:

  beat:
    <<: *uwsgi-common
    container_name: qgis-plugins-beat
    working_dir: /home/web/django_project
    entrypoint: [ ]
    command: celery --app=plugins.celery:app beat -s /home/web/celerybeat-schedule/schedule -l INFO
    networks:
      internal:

  worker:
    <<: *uwsgi-common
    container_name: qgis-plugins-worker
    depends_on:
      - db
      - rabbitmq
      - beat
    working_dir: /home/web/django_project
    entrypoint: []
    command: celery -A plugins worker -l INFO
    networks:
      internal:

  web:
    # Note you cannot scale if you use container_name
    container_name: qgis-plugins-web
    image: nginx
    hostname: web
    entrypoint:
    - /etc/nginx/sites-available/docker-entrypoint.sh
    ports:
    - "80:80"
    - "443:443"
    volumes:
      - ./sites-enabled:/etc/nginx/sites-available/:ro
      - ${QGISPLUGINS_STATIC_VOLUME}:/home/web/static:ro
      - ${QGISPLUGINS_MEDIA_VOLUME}:/home/web/media:ro
      - ./webroot:/var/www/webroot
      - ./certbot-etc:/etc/letsencrypt
    depends_on:
      - uwsgi
      - metabase
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    restart: unless-stopped
    command:
    - ${QGISPLUGINS_ENV}
    networks:
      internal:

  dbbackups:
    image: kartoza/pg-backup:16-3.4
    hostname: pg-backups
    volumes:
      - ${QGISPLUGINS_BACKUP_VOLUME}:/backups
    depends_on:
      - db
    environment:
      # take care to let the project name below match that
      # declared in the top of the makefile
      - DUMPPREFIX=${DUMPPREFIX:-QGIS_PLUGINS}
      - POSTGRES_USER=${DATABASE_USERNAME:-docker}
      - POSTGRES_PASS=${DATABASE_PASSWORD:-docker}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_HOST=${DATABASE_HOST:-db}
      - PGDATABASE=${DATABASE_NAME:-gis}
    restart: unless-stopped
    networks:
      internal:

  metabase:
    image: metabase/metabase:latest
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_CONNECTION_URI=jdbc:postgresql://${DATABASE_HOST:-db}:5432/metabase?user=${DATABASE_USERNAME:-docker}&password=${DATABASE_PASSWORD:-docker}
    depends_on:
      - db
    expose:
      - "3000"
    networks:
      internal:

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./webroot:/var/www/webroot
      - ./certbot-etc:/etc/letsencrypt
    depends_on:
      - web
    command: certonly --webroot --webroot-path=/var/www/webroot --email admin@qgis.org --agree-tos --no-eff-email --force-renewal -d plugins.qgis.org
    networks:
      internal:

networks:
    internal: